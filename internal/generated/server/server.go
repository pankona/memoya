// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for SearchRequestType.
const (
	SearchRequestTypeAll  SearchRequestType = "all"
	SearchRequestTypeMemo SearchRequestType = "memo"
	SearchRequestTypeTodo SearchRequestType = "todo"
)

// Defines values for TodoPriority.
const (
	TodoPriorityHigh   TodoPriority = "high"
	TodoPriorityNormal TodoPriority = "normal"
)

// Defines values for TodoStatus.
const (
	TodoStatusBacklog    TodoStatus = "backlog"
	TodoStatusDone       TodoStatus = "done"
	TodoStatusInProgress TodoStatus = "in_progress"
	TodoStatusTodo       TodoStatus = "todo"
)

// Defines values for TodoCreateRequestPriority.
const (
	TodoCreateRequestPriorityHigh   TodoCreateRequestPriority = "high"
	TodoCreateRequestPriorityNormal TodoCreateRequestPriority = "normal"
)

// Defines values for TodoCreateRequestStatus.
const (
	TodoCreateRequestStatusBacklog    TodoCreateRequestStatus = "backlog"
	TodoCreateRequestStatusDone       TodoCreateRequestStatus = "done"
	TodoCreateRequestStatusInProgress TodoCreateRequestStatus = "in_progress"
	TodoCreateRequestStatusTodo       TodoCreateRequestStatus = "todo"
)

// Defines values for TodoListRequestPriority.
const (
	TodoListRequestPriorityHigh   TodoListRequestPriority = "high"
	TodoListRequestPriorityNormal TodoListRequestPriority = "normal"
)

// Defines values for TodoListRequestStatus.
const (
	TodoListRequestStatusBacklog    TodoListRequestStatus = "backlog"
	TodoListRequestStatusDone       TodoListRequestStatus = "done"
	TodoListRequestStatusInProgress TodoListRequestStatus = "in_progress"
	TodoListRequestStatusTodo       TodoListRequestStatus = "todo"
)

// Defines values for TodoUpdateRequestPriority.
const (
	TodoUpdateRequestPriorityHigh   TodoUpdateRequestPriority = "high"
	TodoUpdateRequestPriorityNormal TodoUpdateRequestPriority = "normal"
)

// Defines values for TodoUpdateRequestStatus.
const (
	TodoUpdateRequestStatusBacklog    TodoUpdateRequestStatus = "backlog"
	TodoUpdateRequestStatusDone       TodoUpdateRequestStatus = "done"
	TodoUpdateRequestStatusInProgress TodoUpdateRequestStatus = "in_progress"
	TodoUpdateRequestStatusTodo       TodoUpdateRequestStatus = "todo"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code *string `json:"code,omitempty"`

	// Error Error message
	Error   *string `json:"error,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// Memo defines model for Memo.
type Memo struct {
	ClosedAt     *time.Time `json:"closed_at"`
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Description  *string    `json:"description,omitempty"`
	Id           *string    `json:"id,omitempty"`
	LastModified *time.Time `json:"last_modified,omitempty"`
	LinkedTodos  *[]string  `json:"linked_todos,omitempty"`
	Tags         *[]string  `json:"tags,omitempty"`
	Title        *string    `json:"title,omitempty"`
}

// MemoCreateRequest defines model for MemoCreateRequest.
type MemoCreateRequest struct {
	// Description Memo content
	Description *string `json:"description,omitempty"`

	// LinkedTodos IDs of linked todos
	LinkedTodos *[]string `json:"linked_todos,omitempty"`

	// Tags Tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Title Memo title
	Title string `json:"title"`
}

// MemoCreateResponse defines model for MemoCreateResponse.
type MemoCreateResponse struct {
	Data    *Memo   `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// MemoDeleteRequest defines model for MemoDeleteRequest.
type MemoDeleteRequest struct {
	// Id Memo ID to delete
	Id string `json:"id"`
}

// MemoDeleteResponse defines model for MemoDeleteResponse.
type MemoDeleteResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// MemoListRequest defines model for MemoListRequest.
type MemoListRequest struct {
	// Tags Filter by tags
	Tags *[]string `json:"tags,omitempty"`
}

// MemoListResponse defines model for MemoListResponse.
type MemoListResponse struct {
	Memos   *[]Memo `json:"memos,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// MemoUpdateRequest defines model for MemoUpdateRequest.
type MemoUpdateRequest struct {
	// Description New description
	Description *string `json:"description,omitempty"`

	// Id Memo ID to update
	Id string `json:"id"`

	// LinkedTodos New linked todo IDs
	LinkedTodos *[]string `json:"linked_todos,omitempty"`

	// Tags New tags
	Tags *[]string `json:"tags,omitempty"`

	// Title New title
	Title *string `json:"title,omitempty"`
}

// MemoUpdateResponse defines model for MemoUpdateResponse.
type MemoUpdateResponse struct {
	Data    *Memo   `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// SearchRequest defines model for SearchRequest.
type SearchRequest struct {
	// Query Search query string
	Query *string `json:"query,omitempty"`

	// Tags Filter by tags
	Tags *[]string `json:"tags,omitempty"`

	// Type Filter by type
	Type *SearchRequestType `json:"type,omitempty"`
}

// SearchRequestType Filter by type
type SearchRequestType string

// SearchResponse defines model for SearchResponse.
type SearchResponse struct {
	Message *string        `json:"message,omitempty"`
	Query   *string        `json:"query,omitempty"`
	Results *SearchResults `json:"results,omitempty"`
	Success *bool          `json:"success,omitempty"`
	Type    *string        `json:"type,omitempty"`
}

// SearchResults defines model for SearchResults.
type SearchResults struct {
	Memos *[]Memo `json:"memos,omitempty"`
	Todos *[]Todo `json:"todos,omitempty"`
}

// TagListRequest Empty request body for tag listing
type TagListRequest = map[string]interface{}

// TagListResponse defines model for TagListResponse.
type TagListResponse struct {
	Count   *int      `json:"count,omitempty"`
	Message *string   `json:"message,omitempty"`
	Success *bool     `json:"success,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
}

// Todo defines model for Todo.
type Todo struct {
	ClosedAt     *time.Time    `json:"closed_at"`
	CreatedAt    *time.Time    `json:"created_at,omitempty"`
	Description  *string       `json:"description,omitempty"`
	Id           *string       `json:"id,omitempty"`
	LastModified *time.Time    `json:"last_modified,omitempty"`
	ParentId     *string       `json:"parent_id,omitempty"`
	Priority     *TodoPriority `json:"priority,omitempty"`
	Status       *TodoStatus   `json:"status,omitempty"`
	Tags         *[]string     `json:"tags,omitempty"`
	Title        *string       `json:"title,omitempty"`
}

// TodoPriority defines model for Todo.Priority.
type TodoPriority string

// TodoStatus defines model for Todo.Status.
type TodoStatus string

// TodoCreateRequest defines model for TodoCreateRequest.
type TodoCreateRequest struct {
	// Description Todo description
	Description *string `json:"description,omitempty"`

	// ParentId Parent todo ID for hierarchical structure
	ParentId *string `json:"parent_id,omitempty"`

	// Priority Todo priority
	Priority *TodoCreateRequestPriority `json:"priority,omitempty"`

	// Status Todo status
	Status *TodoCreateRequestStatus `json:"status,omitempty"`

	// Tags Tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Title Todo title
	Title string `json:"title"`
}

// TodoCreateRequestPriority Todo priority
type TodoCreateRequestPriority string

// TodoCreateRequestStatus Todo status
type TodoCreateRequestStatus string

// TodoCreateResponse defines model for TodoCreateResponse.
type TodoCreateResponse struct {
	Data    *Todo   `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// TodoDeleteRequest defines model for TodoDeleteRequest.
type TodoDeleteRequest struct {
	// Id Todo ID to delete
	Id string `json:"id"`
}

// TodoDeleteResponse defines model for TodoDeleteResponse.
type TodoDeleteResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// TodoListRequest defines model for TodoListRequest.
type TodoListRequest struct {
	// Priority Filter by priority
	Priority *TodoListRequestPriority `json:"priority,omitempty"`

	// Status Filter by status
	Status *TodoListRequestStatus `json:"status,omitempty"`

	// Tags Filter by tags
	Tags *[]string `json:"tags,omitempty"`
}

// TodoListRequestPriority Filter by priority
type TodoListRequestPriority string

// TodoListRequestStatus Filter by status
type TodoListRequestStatus string

// TodoListResponse defines model for TodoListResponse.
type TodoListResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
	Todos   *[]Todo `json:"todos,omitempty"`
}

// TodoUpdateRequest defines model for TodoUpdateRequest.
type TodoUpdateRequest struct {
	// Description New description
	Description *string `json:"description,omitempty"`

	// Id Todo ID to update
	Id string `json:"id"`

	// Priority New priority
	Priority *TodoUpdateRequestPriority `json:"priority,omitempty"`

	// Status New status
	Status *TodoUpdateRequestStatus `json:"status,omitempty"`

	// Tags New tags
	Tags *[]string `json:"tags,omitempty"`

	// Title New title
	Title *string `json:"title,omitempty"`
}

// TodoUpdateRequestPriority New priority
type TodoUpdateRequestPriority string

// TodoUpdateRequestStatus New status
type TodoUpdateRequestStatus string

// TodoUpdateResponse defines model for TodoUpdateResponse.
type TodoUpdateResponse struct {
	Data    *Todo   `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// CreateMemoJSONRequestBody defines body for CreateMemo for application/json ContentType.
type CreateMemoJSONRequestBody = MemoCreateRequest

// DeleteMemoJSONRequestBody defines body for DeleteMemo for application/json ContentType.
type DeleteMemoJSONRequestBody = MemoDeleteRequest

// ListMemosJSONRequestBody defines body for ListMemos for application/json ContentType.
type ListMemosJSONRequestBody = MemoListRequest

// UpdateMemoJSONRequestBody defines body for UpdateMemo for application/json ContentType.
type UpdateMemoJSONRequestBody = MemoUpdateRequest

// SearchJSONRequestBody defines body for Search for application/json ContentType.
type SearchJSONRequestBody = SearchRequest

// ListTagsJSONRequestBody defines body for ListTags for application/json ContentType.
type ListTagsJSONRequestBody = TagListRequest

// CreateTodoJSONRequestBody defines body for CreateTodo for application/json ContentType.
type CreateTodoJSONRequestBody = TodoCreateRequest

// DeleteTodoJSONRequestBody defines body for DeleteTodo for application/json ContentType.
type DeleteTodoJSONRequestBody = TodoDeleteRequest

// ListTodosJSONRequestBody defines body for ListTodos for application/json ContentType.
type ListTodosJSONRequestBody = TodoListRequest

// UpdateTodoJSONRequestBody defines body for UpdateTodo for application/json ContentType.
type UpdateTodoJSONRequestBody = TodoUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check endpoint
	// (GET /health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Create a new memo
	// (POST /mcp/memo_create)
	CreateMemo(w http.ResponseWriter, r *http.Request)
	// Delete a memo
	// (POST /mcp/memo_delete)
	DeleteMemo(w http.ResponseWriter, r *http.Request)
	// List memos with optional filters
	// (POST /mcp/memo_list)
	ListMemos(w http.ResponseWriter, r *http.Request)
	// Update an existing memo
	// (POST /mcp/memo_update)
	UpdateMemo(w http.ResponseWriter, r *http.Request)
	// Search across memos and todos
	// (POST /mcp/search)
	Search(w http.ResponseWriter, r *http.Request)
	// List all unique tags
	// (POST /mcp/tag_list)
	ListTags(w http.ResponseWriter, r *http.Request)
	// Create a new todo
	// (POST /mcp/todo_create)
	CreateTodo(w http.ResponseWriter, r *http.Request)
	// Delete a todo
	// (POST /mcp/todo_delete)
	DeleteTodo(w http.ResponseWriter, r *http.Request)
	// List todos with optional filters
	// (POST /mcp/todo_list)
	ListTodos(w http.ResponseWriter, r *http.Request)
	// Update an existing todo
	// (POST /mcp/todo_update)
	UpdateTodo(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Health check endpoint
// (GET /health)
func (_ Unimplemented) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new memo
// (POST /mcp/memo_create)
func (_ Unimplemented) CreateMemo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a memo
// (POST /mcp/memo_delete)
func (_ Unimplemented) DeleteMemo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List memos with optional filters
// (POST /mcp/memo_list)
func (_ Unimplemented) ListMemos(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing memo
// (POST /mcp/memo_update)
func (_ Unimplemented) UpdateMemo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search across memos and todos
// (POST /mcp/search)
func (_ Unimplemented) Search(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all unique tags
// (POST /mcp/tag_list)
func (_ Unimplemented) ListTags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new todo
// (POST /mcp/todo_create)
func (_ Unimplemented) CreateTodo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a todo
// (POST /mcp/todo_delete)
func (_ Unimplemented) DeleteTodo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List todos with optional filters
// (POST /mcp/todo_list)
func (_ Unimplemented) ListTodos(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing todo
// (POST /mcp/todo_update)
func (_ Unimplemented) UpdateTodo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateMemo operation middleware
func (siw *ServerInterfaceWrapper) CreateMemo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMemo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteMemo operation middleware
func (siw *ServerInterfaceWrapper) DeleteMemo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMemo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMemos operation middleware
func (siw *ServerInterfaceWrapper) ListMemos(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMemos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateMemo operation middleware
func (siw *ServerInterfaceWrapper) UpdateMemo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMemo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Search(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTodo operation middleware
func (siw *ServerInterfaceWrapper) CreateTodo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTodo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTodo operation middleware
func (siw *ServerInterfaceWrapper) DeleteTodo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTodo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTodos operation middleware
func (siw *ServerInterfaceWrapper) ListTodos(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTodos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTodo operation middleware
func (siw *ServerInterfaceWrapper) UpdateTodo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTodo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.HealthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/memo_create", wrapper.CreateMemo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/memo_delete", wrapper.DeleteMemo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/memo_list", wrapper.ListMemos)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/memo_update", wrapper.UpdateMemo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/search", wrapper.Search)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/tag_list", wrapper.ListTags)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/todo_create", wrapper.CreateTodo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/todo_delete", wrapper.DeleteTodo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/todo_list", wrapper.ListTodos)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/todo_update", wrapper.UpdateTodo)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xabW/bOBL+KwTvPiqx26Z3PX9LmxTrRZPmEvf2cGkQMNLY5oYiVZJK6iv83xd8kSzJ",
	"VCw7ttPdxQKNRXE4nHnm4cxQP3As0kxw4FrhwQ8sQWWCK7A/3pPkEr7loLT5FQuugds/SZYxGhNNBe/9",
	"rgQ3z+A7STMG7s0E8AC/Pz65vTz995fTqxGOMEgpJB7gIX8gjCZIOsloLGRKNI6wyuMYlMKDMWEK5hFW",
	"8RRSYgT+XcIYD/Dfegtle25U9U6t3Pl8HuEEVCxpZtQyy5NyETyP8JBrkJywK5APIN2sTXY1PB+dXp4f",
	"f7o9vbz8fFnbmFsAKbsCcs+3v6/wOvMInwv9UeQ82Whb559Htx8/fzk/qezoEpTIZQyIC+MnI3r72wks",
	"Mi+lWhiWvsqkyEBq6tDpFP/REGdfRnYsWmwTD8//c/xpWMWjnmVmQGlJ+cSYD4plQgJTUIpMGjLbkLwk",
	"urRZxfLWfOW7d0IwINxu3T8Sd79DbKF7BqkI7J8JBcktsU72aw9wQjQcaJoaVXnOGLkzi2mZQ0CvWALR",
	"pYzFzl73Xx8d9F8d9F+NXvUHffP//3AUXmRJaM18VaknVMW5UlRwRO5ErlEmhdkikoIkKclCwmhSl5FC",
	"Kg5evX4TepcRpW9TkdAxhWSLG2KU30Nyq0Ui6i68xuaZVecmwlRDaseXBPgHREoys7/JpCnoUch7HOEU",
	"QJtJ64mj2oXyYr9nTg46FxrU8p7aQPbB4qHC+XXENTxbjxMzHxW0Ez3T7U2TNxjwRCExRu4l5F6Kgm6J",
	"3J9Hb/+xmYfq647IRJkoRzHRMBGS/t+yan3trXgyYFo3Fq3lZMNMVJpguPayb1Z43p3+AdcTvZLiLU3N",
	"zdYdVy4FLvJ8gzwfjnPGZl35skZhK+nyBBg8gWRHKwErD0+QFiixs2vGbieehp1p0mrkQqk2I7cbzim0",
	"D8N9okq3mi0cFh8p0yDR3QzZ8VA05HJiaGGNYHhav3YLpo4wymW6ALYZhkE/2NQKvUVuiZ3Y/kuWbEy/",
	"5/CIqk+q2HVyE5QsmJiHOSNaFRm5FdUxMlbxuNG5QuJoeBLi8X+++9c2yNss1o5PZ6GtsLVdaImsCx+s",
	"R9pPkEkBlt0ytjfMjonnCoiMp63A/5aDnC0b2s1CdhR5VerAdKZuxfqGdLYeSOzvJ9Yw4xEGnqdmAcKY",
	"TR5S4XMXs9piS264QzZXWHSto6agOAkqZzpostIVa5i5ELcCjKXK9uW1MLUw83NMVSi5iyOlZMBOUkbG",
	"8Z2OxBGZNE7sRvWaZnpWVqh3IpnZBFaTCWJUaRcy7VLb4BOLnNdrxqNSDOUaJiBXHKRHKOf0Ww5FkD2D",
	"UZ4qqDKQSnDCFjlIhB1Qn5mLWBf9+Wvy4yRBHB7ROOexGSWM6pk56PUUEMk61eTVamtfNXlGJHB921TF",
	"PT54SqNMUiGpdiTmWXdKJ1MLDJkSVmdcP7QMT010rqpC7kh8z8Sk4O0IU36bSTGRBsURTgSHumj/Wuux",
	"VEFzAg/ARJY6AK+fTQebBEPzrxGJxkB0LgH9txtjGuw/p1Vg5rcmq5sgsoaG+loXdqjILy35TSlIQ/k0",
	"JszkDXlsNl9TYk0cBbZXDkfbQVlgCT8Y7Q6BG7Q/tojUwJaX8+quIO7WCqki+zmJdXGABw9Ai8X9tEKM",
	"Hhu0QkY+WsKtkPao6Fa9VJVaKz/Vjjf20QoxOj7ZCmkP/0Vuv1sOWKyzbyLYW8Nn4YUN6pg3ZWf4ebnl",
	"rjJ3key84aOJum+81KnhU4n/QMNns1PR6LteQPhna4SEWeP5wVAf7xgT4fZS4zTcW5epOAtpcTqSsPu7",
	"E/Y22k2rT8V9tJvMdIhzg8Mro5j/1gGIBHmc66n5dWd/fSxKkV9/G+HmvfWvv42QFvfAbUpEcj0Frv09",
	"O/b311YTK2qxianWmbsHp3wsirt6Etv45yQF33CdEXR8MURXeZYJqZeKuOKdsw8XxYcA5vWxvatOBSLc",
	"N1VTwsnEYuDwKx9NqbLvZVI80AQUAp5kgnKtkJ4SjWIh3ScgZrYVroVgKvrKCWPikfKJfRgzCnaOQKbc",
	"lyTW6JHqqU3SvWYm7oAn6IES9MtodHH41diF0Rg8gIrNDkcVnFf3dXwxxBF+AKncll8d9g/75l2RAScZ",
	"xQP85rB/aIgoI3pq/dibAmHOiROwNjUotV4ZJniAf7HDH6YQm2Oq9rnL636/w6cTi88d6gFQKQhLTIv7",
	"IIHQFJQmadbaJHg6SkuGWwhajtrlDy2uQD7QGBBVyNnIHUwqT1MiZ6VpUGxsU+ICF4R37cfxjZnVS+Os",
	"Z4B26xJZaw+hAgZ36fSZ62j6RtR7kczWMvWqllu9Gp3XLWaIYf5MX3dVwNNjwPxnrReg8wgfOXVCq5Rq",
	"9yqfY80j/LbLlNBHT3WnO8URsTV30Xf2DrdOa7jb1wOt7naJ/Y7dXS9pXsDdjfKlzd3BWmUzdx/1j1ZP",
	"Kb8A2x4+3E4R6YINRn0WG0SGSeTP/OXproBRLdleABa1WqUFFApJ0JLCw09FA0Zzd7XtznGRud4bGtta",
	"T63wvK8SWn3vsscds0K9mnoB9zdy5DZWCCa5fy5WcDtFhCP47q6RVvCDspds7QBxl3A7Akf9ennPwGjc",
	"xAYTM3uPbeZu7bjYkp+9aiSWQinPD0VlUeUE776FvzWZdDgORq5g3oXPGxeje3Z68wI14HXbTf9pjwLC",
	"WPOC1rt6RCZVP4ukawkwct2XnTh76UJq3/5evjcIuby18f/zlABFJ7jwtv0Epe7ubiXAjt39oiVA4Aaj",
	"zd1/pRKgAzY6cL4/OnYFjJdk/eZ1RQsofmLetwf7yhIg5PluJcCOWeFFS4BAm7yNFf6aJUALP1Qa7nhw",
	"XW+1X9/Mb8ywWUXZ0bq1PjCRJ+gy5yiTIsntFyG+321vGZnvqKtBz1aiM3LgRg++m/8O8viQHMqcH5Is",
	"w/OoKf6TiAlDlVuakOxBr8fMe1Oh9OBd/10fG539LpsSa03UMgJM8Ph2t++iLutia8NFtz442X9eGLyv",
	"WzHVX760fEQbmuGT+sByZLJyNTLB85v5HwEAAP//tNL26186AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
