// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for DeviceAuthPollResponseDataStatus.
const (
	Completed DeviceAuthPollResponseDataStatus = "completed"
	Denied    DeviceAuthPollResponseDataStatus = "denied"
	Expired   DeviceAuthPollResponseDataStatus = "expired"
	Pending   DeviceAuthPollResponseDataStatus = "pending"
)

// Defines values for SearchRequestType.
const (
	SearchRequestTypeAll  SearchRequestType = "all"
	SearchRequestTypeMemo SearchRequestType = "memo"
	SearchRequestTypeTodo SearchRequestType = "todo"
)

// Defines values for TodoPriority.
const (
	TodoPriorityHigh   TodoPriority = "high"
	TodoPriorityNormal TodoPriority = "normal"
)

// Defines values for TodoStatus.
const (
	TodoStatusBacklog    TodoStatus = "backlog"
	TodoStatusDone       TodoStatus = "done"
	TodoStatusInProgress TodoStatus = "in_progress"
	TodoStatusTodo       TodoStatus = "todo"
)

// Defines values for TodoCreateRequestPriority.
const (
	TodoCreateRequestPriorityHigh   TodoCreateRequestPriority = "high"
	TodoCreateRequestPriorityNormal TodoCreateRequestPriority = "normal"
)

// Defines values for TodoCreateRequestStatus.
const (
	TodoCreateRequestStatusBacklog    TodoCreateRequestStatus = "backlog"
	TodoCreateRequestStatusDone       TodoCreateRequestStatus = "done"
	TodoCreateRequestStatusInProgress TodoCreateRequestStatus = "in_progress"
	TodoCreateRequestStatusTodo       TodoCreateRequestStatus = "todo"
)

// Defines values for TodoListRequestPriority.
const (
	TodoListRequestPriorityHigh   TodoListRequestPriority = "high"
	TodoListRequestPriorityNormal TodoListRequestPriority = "normal"
)

// Defines values for TodoListRequestStatus.
const (
	TodoListRequestStatusBacklog    TodoListRequestStatus = "backlog"
	TodoListRequestStatusDone       TodoListRequestStatus = "done"
	TodoListRequestStatusInProgress TodoListRequestStatus = "in_progress"
	TodoListRequestStatusTodo       TodoListRequestStatus = "todo"
)

// Defines values for TodoUpdateRequestPriority.
const (
	TodoUpdateRequestPriorityHigh   TodoUpdateRequestPriority = "high"
	TodoUpdateRequestPriorityNormal TodoUpdateRequestPriority = "normal"
)

// Defines values for TodoUpdateRequestStatus.
const (
	TodoUpdateRequestStatusBacklog    TodoUpdateRequestStatus = "backlog"
	TodoUpdateRequestStatusDone       TodoUpdateRequestStatus = "done"
	TodoUpdateRequestStatusInProgress TodoUpdateRequestStatus = "in_progress"
	TodoUpdateRequestStatusTodo       TodoUpdateRequestStatus = "todo"
)

// AccountDeleteRequest defines model for AccountDeleteRequest.
type AccountDeleteRequest struct {
	// Confirm Confirmation flag for deletion
	Confirm *bool `json:"confirm,omitempty"`
}

// AccountDeleteResponse defines model for AccountDeleteResponse.
type AccountDeleteResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// DeviceAuthPollRequest defines model for DeviceAuthPollRequest.
type DeviceAuthPollRequest struct {
	// DeviceCode Device code from start request
	DeviceCode string `json:"device_code"`
}

// DeviceAuthPollResponse defines model for DeviceAuthPollResponse.
type DeviceAuthPollResponse struct {
	Data *struct {
		// AccessToken JWT access token (only when authenticated)
		AccessToken *string `json:"access_token,omitempty"`

		// Status Authentication status
		Status *DeviceAuthPollResponseDataStatus `json:"status,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// DeviceAuthPollResponseDataStatus Authentication status
type DeviceAuthPollResponseDataStatus string

// DeviceAuthStartRequest defines model for DeviceAuthStartRequest.
type DeviceAuthStartRequest struct {
	// ClientId OAuth client ID
	ClientId *string `json:"client_id,omitempty"`
}

// DeviceAuthStartResponse defines model for DeviceAuthStartResponse.
type DeviceAuthStartResponse struct {
	Data *struct {
		// DeviceCode Device code for polling
		DeviceCode *string `json:"device_code,omitempty"`

		// ExpiresIn Device code expiration time in seconds
		ExpiresIn *int `json:"expires_in,omitempty"`

		// Interval Polling interval in seconds
		Interval *int `json:"interval,omitempty"`

		// UserCode User code to enter on verification URL
		UserCode *string `json:"user_code,omitempty"`

		// VerificationUri URL where user enters the code
		VerificationUri *string `json:"verification_uri,omitempty"`

		// VerificationUriComplete Complete verification URL with code
		VerificationUriComplete *string `json:"verification_uri_complete,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code *string `json:"code,omitempty"`

	// Error Error message
	Error   *string `json:"error,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// Memo defines model for Memo.
type Memo struct {
	ClosedAt     *time.Time `json:"closed_at"`
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Description  *string    `json:"description,omitempty"`
	Id           *string    `json:"id,omitempty"`
	LastModified *time.Time `json:"last_modified,omitempty"`
	LinkedTodos  *[]string  `json:"linked_todos,omitempty"`
	Tags         *[]string  `json:"tags,omitempty"`
	Title        *string    `json:"title,omitempty"`
}

// MemoCreateRequest defines model for MemoCreateRequest.
type MemoCreateRequest struct {
	// Description Memo content
	Description *string `json:"description,omitempty"`

	// LinkedTodos IDs of linked todos
	LinkedTodos *[]string `json:"linked_todos,omitempty"`

	// Tags Tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Title Memo title
	Title string `json:"title"`
}

// MemoCreateResponse defines model for MemoCreateResponse.
type MemoCreateResponse struct {
	Data    *Memo   `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// MemoDeleteRequest defines model for MemoDeleteRequest.
type MemoDeleteRequest struct {
	// Id Memo ID to delete
	Id string `json:"id"`
}

// MemoDeleteResponse defines model for MemoDeleteResponse.
type MemoDeleteResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// MemoListRequest defines model for MemoListRequest.
type MemoListRequest struct {
	// Tags Filter by tags
	Tags *[]string `json:"tags,omitempty"`
}

// MemoListResponse defines model for MemoListResponse.
type MemoListResponse struct {
	Memos   *[]Memo `json:"memos,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// MemoUpdateRequest defines model for MemoUpdateRequest.
type MemoUpdateRequest struct {
	// Description New description
	Description *string `json:"description,omitempty"`

	// Id Memo ID to update
	Id string `json:"id"`

	// LinkedTodos New linked todo IDs
	LinkedTodos *[]string `json:"linked_todos,omitempty"`

	// Tags New tags
	Tags *[]string `json:"tags,omitempty"`

	// Title New title
	Title *string `json:"title,omitempty"`
}

// MemoUpdateResponse defines model for MemoUpdateResponse.
type MemoUpdateResponse struct {
	Data    *Memo   `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// SearchRequest defines model for SearchRequest.
type SearchRequest struct {
	// Query Search query string
	Query *string `json:"query,omitempty"`

	// Tags Filter by tags
	Tags *[]string `json:"tags,omitempty"`

	// Type Filter by type
	Type *SearchRequestType `json:"type,omitempty"`
}

// SearchRequestType Filter by type
type SearchRequestType string

// SearchResult defines model for SearchResult.
type SearchResult struct {
	Message *string        `json:"message,omitempty"`
	Query   *string        `json:"query,omitempty"`
	Results *SearchResults `json:"results,omitempty"`
	Success *bool          `json:"success,omitempty"`
	Type    *string        `json:"type,omitempty"`
}

// SearchResults defines model for SearchResults.
type SearchResults struct {
	Memos *[]Memo `json:"memos,omitempty"`
	Todos *[]Todo `json:"todos,omitempty"`
}

// TagListRequest Empty request body for tag listing
type TagListRequest = map[string]interface{}

// TagListResponse defines model for TagListResponse.
type TagListResponse struct {
	Count   *int      `json:"count,omitempty"`
	Message *string   `json:"message,omitempty"`
	Success *bool     `json:"success,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
}

// Todo defines model for Todo.
type Todo struct {
	ClosedAt     *time.Time    `json:"closed_at"`
	CreatedAt    *time.Time    `json:"created_at,omitempty"`
	Description  *string       `json:"description,omitempty"`
	Id           *string       `json:"id,omitempty"`
	LastModified *time.Time    `json:"last_modified,omitempty"`
	ParentId     *string       `json:"parent_id,omitempty"`
	Priority     *TodoPriority `json:"priority,omitempty"`
	Status       *TodoStatus   `json:"status,omitempty"`
	Tags         *[]string     `json:"tags,omitempty"`
	Title        *string       `json:"title,omitempty"`
}

// TodoPriority defines model for Todo.Priority.
type TodoPriority string

// TodoStatus defines model for Todo.Status.
type TodoStatus string

// TodoCreateRequest defines model for TodoCreateRequest.
type TodoCreateRequest struct {
	// Description Todo description
	Description *string `json:"description,omitempty"`

	// ParentId Parent todo ID for hierarchical structure
	ParentId *string `json:"parent_id,omitempty"`

	// Priority Todo priority
	Priority *TodoCreateRequestPriority `json:"priority,omitempty"`

	// Status Todo status
	Status *TodoCreateRequestStatus `json:"status,omitempty"`

	// Tags Tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Title Todo title
	Title string `json:"title"`
}

// TodoCreateRequestPriority Todo priority
type TodoCreateRequestPriority string

// TodoCreateRequestStatus Todo status
type TodoCreateRequestStatus string

// TodoCreateResponse defines model for TodoCreateResponse.
type TodoCreateResponse struct {
	Data    *Todo   `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// TodoDeleteRequest defines model for TodoDeleteRequest.
type TodoDeleteRequest struct {
	// Id Todo ID to delete
	Id string `json:"id"`
}

// TodoDeleteResponse defines model for TodoDeleteResponse.
type TodoDeleteResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// TodoListRequest defines model for TodoListRequest.
type TodoListRequest struct {
	// Priority Filter by priority
	Priority *TodoListRequestPriority `json:"priority,omitempty"`

	// Status Filter by status
	Status *TodoListRequestStatus `json:"status,omitempty"`

	// Tags Filter by tags
	Tags *[]string `json:"tags,omitempty"`
}

// TodoListRequestPriority Filter by priority
type TodoListRequestPriority string

// TodoListRequestStatus Filter by status
type TodoListRequestStatus string

// TodoListResponse defines model for TodoListResponse.
type TodoListResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
	Todos   *[]Todo `json:"todos,omitempty"`
}

// TodoUpdateRequest defines model for TodoUpdateRequest.
type TodoUpdateRequest struct {
	// Description New description
	Description *string `json:"description,omitempty"`

	// Id Todo ID to update
	Id string `json:"id"`

	// Priority New priority
	Priority *TodoUpdateRequestPriority `json:"priority,omitempty"`

	// Status New status
	Status *TodoUpdateRequestStatus `json:"status,omitempty"`

	// Tags New tags
	Tags *[]string `json:"tags,omitempty"`

	// Title New title
	Title *string `json:"title,omitempty"`
}

// TodoUpdateRequestPriority New priority
type TodoUpdateRequestPriority string

// TodoUpdateRequestStatus New status
type TodoUpdateRequestStatus string

// TodoUpdateResponse defines model for TodoUpdateResponse.
type TodoUpdateResponse struct {
	Data    *Todo   `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// UserInfoResponse defines model for UserInfoResponse.
type UserInfoResponse struct {
	Data *struct {
		CreatedAt *time.Time `json:"created_at,omitempty"`

		// Id User ID
		Id       *string `json:"id,omitempty"`
		IsActive *bool   `json:"is_active,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// DeleteAccountJSONRequestBody defines body for DeleteAccount for application/json ContentType.
type DeleteAccountJSONRequestBody = AccountDeleteRequest

// PollDeviceAuthJSONRequestBody defines body for PollDeviceAuth for application/json ContentType.
type PollDeviceAuthJSONRequestBody = DeviceAuthPollRequest

// StartDeviceAuthJSONRequestBody defines body for StartDeviceAuth for application/json ContentType.
type StartDeviceAuthJSONRequestBody = DeviceAuthStartRequest

// CreateMemoJSONRequestBody defines body for CreateMemo for application/json ContentType.
type CreateMemoJSONRequestBody = MemoCreateRequest

// DeleteMemoJSONRequestBody defines body for DeleteMemo for application/json ContentType.
type DeleteMemoJSONRequestBody = MemoDeleteRequest

// ListMemosJSONRequestBody defines body for ListMemos for application/json ContentType.
type ListMemosJSONRequestBody = MemoListRequest

// UpdateMemoJSONRequestBody defines body for UpdateMemo for application/json ContentType.
type UpdateMemoJSONRequestBody = MemoUpdateRequest

// SearchJSONRequestBody defines body for Search for application/json ContentType.
type SearchJSONRequestBody = SearchRequest

// ListTagsJSONRequestBody defines body for ListTags for application/json ContentType.
type ListTagsJSONRequestBody = TagListRequest

// CreateTodoJSONRequestBody defines body for CreateTodo for application/json ContentType.
type CreateTodoJSONRequestBody = TodoCreateRequest

// DeleteTodoJSONRequestBody defines body for DeleteTodo for application/json ContentType.
type DeleteTodoJSONRequestBody = TodoDeleteRequest

// ListTodosJSONRequestBody defines body for ListTodos for application/json ContentType.
type ListTodosJSONRequestBody = TodoListRequest

// UpdateTodoJSONRequestBody defines body for UpdateTodo for application/json ContentType.
type UpdateTodoJSONRequestBody = TodoUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete user account and all associated data
	// (POST /auth/delete_account)
	DeleteAccount(w http.ResponseWriter, r *http.Request)
	// Poll for device authentication completion
	// (POST /auth/device_poll)
	PollDeviceAuth(w http.ResponseWriter, r *http.Request)
	// Start device authentication flow
	// (POST /auth/device_start)
	StartDeviceAuth(w http.ResponseWriter, r *http.Request)
	// Get current user information
	// (GET /auth/user)
	GetUserInfo(w http.ResponseWriter, r *http.Request)
	// Health check endpoint
	// (GET /health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Create a new memo
	// (POST /mcp/memo_create)
	CreateMemo(w http.ResponseWriter, r *http.Request)
	// Delete a memo
	// (POST /mcp/memo_delete)
	DeleteMemo(w http.ResponseWriter, r *http.Request)
	// List memos with optional filters
	// (POST /mcp/memo_list)
	ListMemos(w http.ResponseWriter, r *http.Request)
	// Update an existing memo
	// (POST /mcp/memo_update)
	UpdateMemo(w http.ResponseWriter, r *http.Request)
	// Search across memos and todos
	// (POST /mcp/search)
	Search(w http.ResponseWriter, r *http.Request)
	// List all unique tags
	// (POST /mcp/tag_list)
	ListTags(w http.ResponseWriter, r *http.Request)
	// Create a new todo
	// (POST /mcp/todo_create)
	CreateTodo(w http.ResponseWriter, r *http.Request)
	// Delete a todo
	// (POST /mcp/todo_delete)
	DeleteTodo(w http.ResponseWriter, r *http.Request)
	// List todos with optional filters
	// (POST /mcp/todo_list)
	ListTodos(w http.ResponseWriter, r *http.Request)
	// Update an existing todo
	// (POST /mcp/todo_update)
	UpdateTodo(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Delete user account and all associated data
// (POST /auth/delete_account)
func (_ Unimplemented) DeleteAccount(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Poll for device authentication completion
// (POST /auth/device_poll)
func (_ Unimplemented) PollDeviceAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Start device authentication flow
// (POST /auth/device_start)
func (_ Unimplemented) StartDeviceAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current user information
// (GET /auth/user)
func (_ Unimplemented) GetUserInfo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check endpoint
// (GET /health)
func (_ Unimplemented) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new memo
// (POST /mcp/memo_create)
func (_ Unimplemented) CreateMemo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a memo
// (POST /mcp/memo_delete)
func (_ Unimplemented) DeleteMemo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List memos with optional filters
// (POST /mcp/memo_list)
func (_ Unimplemented) ListMemos(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing memo
// (POST /mcp/memo_update)
func (_ Unimplemented) UpdateMemo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search across memos and todos
// (POST /mcp/search)
func (_ Unimplemented) Search(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all unique tags
// (POST /mcp/tag_list)
func (_ Unimplemented) ListTags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new todo
// (POST /mcp/todo_create)
func (_ Unimplemented) CreateTodo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a todo
// (POST /mcp/todo_delete)
func (_ Unimplemented) DeleteTodo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List todos with optional filters
// (POST /mcp/todo_list)
func (_ Unimplemented) ListTodos(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing todo
// (POST /mcp/todo_update)
func (_ Unimplemented) UpdateTodo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteAccount operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccount(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAccount(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PollDeviceAuth operation middleware
func (siw *ServerInterfaceWrapper) PollDeviceAuth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PollDeviceAuth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// StartDeviceAuth operation middleware
func (siw *ServerInterfaceWrapper) StartDeviceAuth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StartDeviceAuth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateMemo operation middleware
func (siw *ServerInterfaceWrapper) CreateMemo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMemo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteMemo operation middleware
func (siw *ServerInterfaceWrapper) DeleteMemo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMemo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMemos operation middleware
func (siw *ServerInterfaceWrapper) ListMemos(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMemos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateMemo operation middleware
func (siw *ServerInterfaceWrapper) UpdateMemo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMemo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Search(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTodo operation middleware
func (siw *ServerInterfaceWrapper) CreateTodo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTodo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTodo operation middleware
func (siw *ServerInterfaceWrapper) DeleteTodo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTodo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTodos operation middleware
func (siw *ServerInterfaceWrapper) ListTodos(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTodos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTodo operation middleware
func (siw *ServerInterfaceWrapper) UpdateTodo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTodo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/delete_account", wrapper.DeleteAccount)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/device_poll", wrapper.PollDeviceAuth)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/device_start", wrapper.StartDeviceAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/user", wrapper.GetUserInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.HealthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/memo_create", wrapper.CreateMemo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/memo_delete", wrapper.DeleteMemo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/memo_list", wrapper.ListMemos)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/memo_update", wrapper.UpdateMemo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/search", wrapper.Search)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/tag_list", wrapper.ListTags)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/todo_create", wrapper.CreateTodo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/todo_delete", wrapper.DeleteTodo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/todo_list", wrapper.ListTodos)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mcp/todo_update", wrapper.UpdateTodo)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
